	printf("new_line index : %d\n", index_nl(buf));
		write(1, buf, map->cols); // 지워야 함
		write(1, "\n", 1); // 지워야 함
		printf("map->cols : %d, cols : %d\n", map->cols, cols);
		printf("passed : valid_rectangle_map\n");
		printf("passed : valid_object\n");
		printf("passed : valid_wall\n");
		printf("passed : copy_buf_to_lst\n");
		printf("map->rows : %d, map->cols : %d\n", map->rows, map->cols);
	printf("map->rows : %d, map->cols : %d\n", map->rows, map->cols);

	printf("game->map.rows : %d, game->map.cols : %d\n", game->map.rows, game->map.cols);

	int		row;
	//int		col;
	//char	*content;
	t_list	*lst;
	row = 0;
	lst = game.map.lst;
	printf("row : %d\tlast_lst_content : %s\n", game.map.rows, (char *)(ft_lstlast(game.map.lst)->content));

	while (row < (game.map.rows) + 1)
	{
		//col = 0;
		//content = (char *)(lst->content);
		printf("row : %d \tcontent : %s\n", row, (char *)(lst->content));
		//printf("x : %d, y : %d\tcontent : %s\n", pos.x, pos.y, content);
		//while (row < )
		//printf("row : %d\tlast_lst_content : %s\n", row, (char *)(ft_lstlast(map->lst)->content));
		//while (pos.y < game.map.cols)
		//{
		//	//printf(content[pos.y]);
		//	put_img(game, content[pos.y], pos);
		//	pos.x++;
		//	pos.y++;
		//}
		row++;
		lst = lst->next;
	}

mv right/elf_side01_walk1.png right/right_1.png
mv right/elf_side01_walk2.png right/right_2.png
mv right/elf_side01_walk3.png right/right_3.png
mv right/elf_side01_walk4.png right/right_4.png
mv right/elf_side01_walk5.png right/right_5.png
mv right/elf_side01_walk6.png right/right_6.png
mv right/elf_side01_walk7.png right/right_7.png
mv right/elf_side01_walk8.png right/right_8.png

gm convert right/right_1.png right/right_1.xpm
gm convert right/right_2.png right/right_2.xpm
gm convert right/right_3.png right/right_3.xpm
gm convert right/right_4.png right/right_4.xpm
gm convert right/right_5.png right/right_5.xpm
gm convert right/right_6.png right/right_6.xpm
gm convert right/right_7.png right/right_7.xpm
gm convert right/right_8.png right/right_8.xpm
